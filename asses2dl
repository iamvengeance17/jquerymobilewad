# -*- coding: utf-8 -*-
"""
Implementing Feedforward neural networks with Keras and TensorFlow  
a. Import the necessary packages  
b. Load the training and testing data (MNIST/CIFAR10)  
c. Define the network architecture using Keras  
d. Train the model using SGD  
e. Evaluate the network  
f. Plot the training loss and accuracy  
"""

# a. Import the necessary packages
import tensorflow as tf
from tensorflow import keras
import matplotlib.pyplot as plt
import random

# b. Load the training and testing data (MNIST)
mnist = tf.keras.datasets.mnist
(x_train, y_train), (x_test, y_test) = mnist.load_data()

x_train = x_train / 255.0  # Normalize the data
x_test = x_test / 255.0

# c. Define the network architecture using Keras  
model = keras.Sequential([
    keras.layers.Flatten(input_shape=(28, 28)),
    keras.layers.Dense(128, activation='relu'),
    keras.layers.Dense(10, activation='softmax')
])

# d. Train the model using SGD 
model.compile(optimizer="sgd",
              loss="sparse_categorical_crossentropy", 
              metrics=['accuracy'])

history = model.fit(x_train, y_train, validation_data=(x_test, y_test), epochs=10)

# e. Evaluate the network 
test_loss, test_acc = model.evaluate(x_test, y_test)
print("Loss: %.3f" % test_loss)
print("Accuracy: %.3f" % test_acc)

# Show a random test image and its prediction
n = random.randint(0, 9999)
plt.imshow(x_test[n], cmap='gray')
plt.show()

predicted_value = model.predict(x_test)
print('Predicted Value: ', predicted_value[n])

# f. Plot the training loss and accuracy 
# Plotting the training accuracy
plt.plot(history.history['accuracy'], label='Train Accuracy')
plt.plot(history.history['val_accuracy'], label='Validation Accuracy')
plt.title('Model Accuracy') 
plt.ylabel('Accuracy')
plt.xlabel('Epoch')
plt.legend(loc='upper left')
plt.show()

# Plotting the training loss
plt.plot(history.history['loss'], label='Train Loss')
plt.plot(history.history['val_loss'], label='Validation Loss')
plt.title('Model Loss') 
plt.ylabel('Loss')
plt.xlabel('Epoch')
plt.legend(loc='upper left')
plt.show()
